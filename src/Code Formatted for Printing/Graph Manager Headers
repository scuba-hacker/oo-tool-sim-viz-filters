/************************************************************************************** * HEADER FILE: Graph Manager.h * PURPOSE		: declare graph_manager class **************************************************************************************/#ifndef _graph_manager_h#define _graph_manager_h#include "ulist.h"#include "graph_spec_obj.h"#include "newstring.h"class graph_manager{	public:		ulist<graph_spec_obj> spec_list;													// lexically ordered on name						void interface();																						// User Interface		void display_help();																				// Display user commands		status new_spec(string_class name, graph_spec new_spec);		// Add spec to list		status delete_spec(string_class name);											// Remove spec from list		void output_spec_list();																		// Dump spec list to cout		void reset_manager();																				// Clear spec_list};#endif/************************************************************************************** * HEADER FILE: extragraphclasses.h * PURPOSE		: declare: port_info class *											 border_info class *											 bound_info class *											 scale_info class *											 range_info class *											 tick_info class **************************************************************************************/#ifndef _extragraphclasses_h_#define _extragraphclasses_h_#include <iostream.h>class port_info{	public:		double top;																								// Global pixel co-ordinates		double left;																							// for window 		double width;		double height;				// Parameterized constructor - default port heigth and width if not specified		port_info (double WIDTH=500, double HEIGHT=500);		// Parameterized constructor - all dimensions specified		port_info (double TOP, double LEFT, double WIDTH, double HEIGHT);		// Overloaded output operator for port_info		friend ostream& operator<<(ostream& output_stream, port_info port);};class border_info{	public:		double top;																									// Inset Border sizes for		double bottom;																							// in all directions		double left;		double right;				// Parameterized constructor - default values for all parameters		border_info (double TOP=10, double BOTTOM=20, double LEFT=30, double RIGHT=10);		// Overloaded output operator for border_info		friend ostream& operator<<(ostream& output_stream, border_info border);};class bound_info{	public:		double top;																								// Bound global co-ordinates		double bottom;																						// for all dimensions		double left;		double right;		double width;																							// variable is derived		double height;																						// variable is derived				bound_info();																							// Default constructor		// Overloaded output operator for bound_info		friend ostream& operator<<(ostream& output_stream, bound_info bound);};class scale_info{	public:		double MajScale;																						// Scale divison setting		double MinTicks;																						// Ticks between divisons				// Parameterized constructor - default values for all parameters		scale_info (double MAJ=1, double MIN=5);		// Overloaded output operator for scale_info		friend ostream& operator<<(ostream& output_stream, scale_info scale);		// Overloaded input operator for scale_info		friend istream& operator>>(istream& input_stream, scale_info& scale);};class range_info{	public:		double Max;																									// Maximum value in range		double Min;																									// Minimum value in range				// Parameterized constructor - default values for all parameters		range_info (double MIN=-5, double MAX=5);		// Overloaded output operator for range_info		friend ostream& operator<<(ostream& output_stream, range_info range);		// Overloaded input operator for range_info		friend istream& operator>>(istream& input_stream, range_info& range);		double range();															// Return Max-Min - ie absolute range size};class tick_info{	public:		double MajTickSize;																			// Pixel Length of Major Tick		double MinTickSize;																			// Pixel Length of Minor Tick				// Parameterized constructor - default values for all parameters		tick_info(double MAJ=5, double MIN=2);		// Overloaded output operator for tick_info		friend ostream& operator<<(ostream& output_stream, tick_info tick);};#endif/************************************************************************************** * HEADER FILE: graph_spec.h * PURPOSE		: declare graph_spec class **************************************************************************************/#ifndef _graph_spec_h#define _graph_spec_h#include "extragraphclasses.h"class graph_spec{	public:		port_info port;																						// Store window dimensions		border_info border;																				// Store border dimensions		scale_info horiz_scale, vert_scale;												// Store horiz/vert scales		range_info horiz_range, vert_range;												// Store horiz/vert ranges 		tick_info ticks;																					// Store tick pixel sizes		int scaleSize;																						// Store Text size in points				graph_spec();																							// Default constructor		// Parameterized Constructor		graph_spec(port_info port1, border_info border1, scale_info horiz_scale1,					scale_info vert_scale1, range_info horiz_range1, range_info vert_range1,					tick_info ticks1);																	// Parameterized Constructor		// Overloaded output operator for graph_spec		friend ostream& operator<<(ostream &output_stream, graph_spec spec);		// Overloaded input operator for graph_spec		friend istream& operator>>(istream& input_stream, graph_spec& spec);};#endif/************************************************************************************** * HEADER FILE: graph_spec_obj.h * PURPOSE		: declare graph_spec_obj class **************************************************************************************/#ifndef _graph_spec_obj_h#define _graph_spec_obj_h#include "newstring.h"#include "graph_spec.h"#include "define_vars.h"class graph_spec_obj{	private:		string_class name;																								// Indexing object		graph_spec spec;																									// Data object		graph_spec_obj *next_graph_spec_obj;															// Used to form list	public:		static string_class undefined_index;				// Holds definition of an undefined index		// Functions required by list		graph_spec_obj();																					// Default constructor		graph_spec_obj(string_class name);												// String_class constructor		// string_class/complex container constructor		graph_spec_obj(string_class name, graph_spec new_spec);		graph_spec_obj(graph_spec_obj &original);									// Copy constructor		graph_spec_obj& operator=( graph_spec_obj &original);			// Overloaded = operator		string_class get_index();															// Return value of index field		status set_index(const string_class setting);					// Set value of index field 				void set_to_first_index();														// Return first index value		void set_to_next_index(const string_class ref);				// Return next index value		compare compare_index(const string_class index1,			// Return comparison between													const string_class index2);			// two index objects															graph_spec get_data();																// Return value of data field	 	status set_data(const graph_spec setting);						// Set value of data field		compare compare_data(const graph_spec name1,					// Return comparison between												 const graph_spec name2);					// two data objects												 		void set_pointer_to(graph_spec_obj *p);								// Set pointer field		graph_spec_obj* get_pointer();												// Return value of pointer field		void print_node();																		// Print Node info				// Overloaded output operator for name_object		friend ostream& operator<<(ostream& output_stream, const graph_spec_obj a);};#endif/************************************************************************************** * HEADER FILE: graph_device.h * PURPOSE		: declare graph_device class **************************************************************************************/#include "extragraphclasses.h"#include <stdio.h>#ifndef _graph_device_h#define _graph_device_hclass graph_device{	private:		port_info port;																							// Window dimensions		border_info border;																					// Border sizes		bound_info bound;																						// Bound co-ordinates		scale_info horiz_scale, vert_scale;													// Horiz/Vert scale info		range_info horiz_range, vert_range;													// Horiz/Vert range info		tick_info ticks;																						// Tick size info				int scaleSize;																							// Text size in points				WindowPtr mainPtr;																					// Window Pointer			public:		graph_device();																							// Default constructor		// Parameterized constructor		graph_device(port_info newport, border_info newborder, scale_info newhoriz_scale,								 scale_info newvert_scale, range_info newhoriz_range,								 range_info newvert_range, tick_info newticks);		// Method for changing parameters after object created		void set_params(scale_info newhoriz_scale, scale_info newvert_scale,										range_info newhoriz_range,  range_info newvert_range);			// GUI functions		void showGraph();																							// Show window		void clear_window();																					// Clear window		void blank_graph();																						// Clear graph of plot			double translate_x(double x);											// Convert x-val to x graph co-ord		double translate_y(double y);											// Convert y-val to y graph co-ord		void draw_x_line(double x, long int brightness);	// Draw Vert line across x-axis		void draw_y_line(double y, long int brightness);	// Draw Horiz line  across y-axis		void draw_axes();																	// Draw axes on graph		void vertical_ticks();														// Add y-axis ticks to graph		void horizontal_ticks();													// Add x-axis ticks to graph		void PlaceCross(int Width);												// PlaceCross at current pen-pos		void set_port(port_info newport);									// Set port params		void set_border(border_info newborder);						// Set border params		void set_horiz_scales(scale_info newhoriz_scale);	// Set horiz scale params		void set_vert_scales(scale_info newvert_scale);		// Set vert scale params		void set_horiz_range(range_info newhoriz_range);	// Set horiz range params		void set_vert_range(range_info newvert_range);		// Set vert range params		void set_ticks(tick_info newticks);								// Set major/minor tick lengths		double x_origin(double x);												// Return origin coord, offset by x		double y_origin(double y);												// Return origin coord, offset by y};#endif