/************************************************************************************** * HEADER FILE: validator.h * PURPOSE		: declare validator class **************************************************************************************/ #ifndef _validator_h#define _validator_h#include "define_vars.h"#include "calc_preprocessor.h"#include "rCalculatorClass.h"#include "newstring.h"#include "ulist.h"#include "stringobject.h"class calculator;																										// forward declarationclass validator{	private:		calculator *connected_calculator;											// Calculator to be validated		calc_preprocessor *connected_preprocessor;						// Preprocessor service provider		// Verify equation with identifier 'name_string' for circular definitions		status verify(const string_class name_string, string_class dependents="");	public:		// Constructor linking preprocessor service provider to validator		validator(calc_preprocessor *preprocessor);		// Validate all equations within 'connect_calculator'		status validate(calculator *connect_calculator);		string_class error_trace;				// return last error_trace generated by failed verify};#endif/************************************************************************************** * HEADER FILE: preprocessorTypes.h * PURPOSE		: declare user_label class **************************************************************************************/#ifndef _preprocessorTypes_h#define _preprocessorTypes_h#include "newstring.h"class user_label{	public:		string_class input_string;																// String from user		string_class calc_string;																	// String for calculator		user_label();																							// Default Constructor		user_label(string_class i_string, string_class c_string);	// Parameterized Constructor		// Overloaded output operator for user_label		friend ostream& operator<<(ostream& output_stream, const user_label label);};#endif/************************************************************************************** * HEADER FILE: calc_preprocessor.h * PURPOSE		: declare calc_preprocessor class **************************************************************************************/#ifndef _calc_preprocessor_h#define _calc_preprocessor_h#include "rCalculatorUserTypes.h"#include "newstring.h"#include "rCalculatorClass.h"#include "preprocessorTypes.h"#include <iostream.h>#include "ulist.h"#include "stringobject.h"class calc_preprocessor{		private:		token_name *correlator;													// Preprocess -  username->calc_token		string_class inverse_correlator[256];						// Postprocess - calc_token->username				int array_length;																// Length of Correlator		istrstream *input_stream;												// Used for handing strings		char *input_char_array;													// Used with istrstreams		status set_input(string_class input_string);		// Used to initialise istrstreams		status reset_input();														// Used to terminate istrstreams			public:		// Constructor which initialises all internal conversion tables		calc_preprocessor(const user_label *input_labels,											const token_name *token_mappings, const int array_length);		~calc_preprocessor();																								// Destructor 				// Method for converting string containing usernames->string containing calc tokens		void preprocess(string_class input_string, string_class &output_string);		// Same as above - additionally returns list of unidentified usernames		void preprocess(string_class input_string, string_class &output_string,										 ulist<string_object> *unidentified);		// Method for converting string containing calc tokens->string containing usernames		void postprocess(const string_class &input_string,string_class &postprocessed_string);};#endif