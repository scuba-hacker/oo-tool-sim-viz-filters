#include <string.h>#include <iostream.h>#include "newstring.h"void main(void){	// This program tests the functionality of the string_class class	// Tests are:	// Constructors first :	// string_class::string_class()	// string_class::string_class(const char *source)	// string_class::string_class(const string_class &original)	// Copy constructor	char testcharstring[100];	string_class string1;			// no parameters	// length of string should be zero	cout << "Test 1 : test the zero parameter constructor function\n";	cout << "\tLength of string1 is " << string1.length() << " : answer should be 0\n";	cout << "\tContents of string1 is \"" << string1 << "\"  : answer should be \"\"\n\n";	strcpy (testcharstring,"Test String1");	string_class string2(testcharstring);		// char string source data	cout << "Test 2 : test the char array parameter constructor function\n";	cout << "\tLength of string2 is " << string2.length() << " : answer should be 12\n";	cout << "\tContents of string2 is \"" << string2 << "\"  : answer should be \"Test String1\"\n\n";	cout << "Test 3: Copy Constructor\n";	cout << "\tAlready tested in order to perform tests 1 & 2\n\n";		cout << "Test 4: Destructor\n";	cout << "\tImplicit Testing Performed\n\n";		cout << "Test 5: Assignment from string_class\n";	string_class string3;	string3=string2;	cout << "\tLength of string3 is " << string3.length() << " : answer should be 12\n";	cout << "\tContents of string3 is \"" << string3 << "\"  : answer should be \"Test String1\"\n\n";		cout << "Test 6: Assignment from char array\n";	string_class string4;	string4="Test String2";	cout << "\tLength of string4 is " << string3.length() << " : answer should be 12\n";	cout << "\tContents of string4 is \"" << string4 << "\"  : answer should be \"Test String2\"\n\n";	cout << "Test 7: Assignment from string_class : already storing shorter string\n";	string4="Test String 3 - This is longer!";	cout << "\tLength of string4 is " << string4.length() << " : answer should be 31\n";	cout << "\tContents of string4 is \"" << string4 << "\"  : answer should be \"Test String 3 - This is longer!\"\n\n";	cout << "Test 8: Assignment from char array : already storing shorter string\n";	string4="Test String 4 - This is even longer!";	cout << "\tLength of string4 is " << string4.length() << " : answer should be 36\n";	cout << "\tContents of string4 is \"" << string4 << "\"  : answer should be \"Test String 4 - This is even longer!\"\n\n";	cout << "Test 9: Read Element of array\n";	cout << "\tElement 3 of string4 is '" << string4[3] << "'  : answer should be 't'\n\n";		cout << "Test 10: Write Element of array\n";	string4[3]='z';	cout << "\tElement 3 of string4 is set to '" << string4[3] << "'  : answer should be 'z'\n\n";	const string_class string5("Constant string");	cout << "Test 11: Read element of constant string array\n";	cout << "\tElement 3 of string5 is set to '" << string5[3] << "'  : answer should be 's'\n\n";	string_class string6("string5");	string_class string7("string5");	char text1[]="string5";	cout << "Test 12: String Comparison between two equal strings\n";	cout << "\tResult is " << (string6==string7) << "  : answer should be 0 (from strcmp)\n\n";	cout << "Test 13: String Comparison between equal string, char array\n";	cout << "\tResult is " << (string6==text1) << "  : answer should be 0 (from strcmp)\n\n";	cout << "Test 14: String Comparison between equal string, char array\n";	cout << "\tResult is " << (text1==string6) << "  : answer should be 0 (from strcmp)\n\n";		string6="string6";		cout << "Test 15: String Comparison between two unequal strings\n";	cout << "\tResult is " << (string6!=string7) << "  : answer should be non-zero (from strcmp)\n\n";	cout << "Test 16: String Comparison between unequal string, char array\n";	cout << "\tResult is " << (string6!=text1) << "  : answer should be non-zero (from strcmp)\n\n";	cout << "Test 17: String Comparison between unequal string, char array\n";	cout << "\tResult is " << (text1!=string6) << "  : answer should be non-zero (from strcmp)\n\n";	cout << "Test 18: streamed input (from keyboard)\n";	cin >> string6;	cout << "\tResult is \"" << string6 << "\"\n\n";	// note above test also checked on buffer overflow - no crashed - stored required amount		cout << "Test 19: result of string2=\"Test String1\" appended to string5=\"Constant String\"\n";	cout << "\t" << string5+string2 << "\n\n";			cout << "Test 20: result of \"Char String1\" appended to string5=\"Constant String\"\n";	cout << "\t" << string5+"Char String1" << "\n\n";		cout << "Test 21: result of string5=\"Constant String\" appended to \"Char String1\"\n";	cout << "\t" << "Char String1"+string5 << "\n\n";	string_class small_string="ABB";	string_class large_string="ABC";	cout << "Test 22: result of (ABB >= ABC)\n";	cout << "\t" << (small_string>=large_string) << "    : answer should be 0\n\n";	cout << "Test 23: result of (ABC >= ABB)\n";	cout << "\t" << (large_string>=small_string) << "    : answer should be 1\n\n";	cout << "Test 24: result of (ABC >= ABB)\n";	cout << "\t" << (large_string>=large_string) << "    : answer should be 1\n\n";			char ch;	cout << "Test 25: streamed input (from keyboard) and one character afterwards\n";	cin >> string6 >> ch;	cout << "\tResult is \"" << string6 << ch << "\"\n\n";	cout << "Test 25: copy contents of last input into char array - output char array\n";	char *copy=new char[string6.length()+1];	string6.string_copy(copy);	cout << "Copied string holds \"" << copy << "\"\n\n";		cout << "Test 26: append single char repeat test - appended to 'Test' string\n";	string_class test("Test");	for (int i=(int)'a'; i<=(int)'z'; i++)	{			test=test+(char)i;	}	cout << "Result of adding piecewise alphabet is '" << test << "'\n";		cout << "Test 27: append_name three strings to empty string (should be separated by single space)\n";	string_class empty;	append_name(empty, string7);	append_name(empty, small_string);	append_name(empty, large_string);	cout << "appended string is '" << empty << "'\n";	cout << "Test 28: search for 'hello' in the string 'fortran goodbye hello perturbed'\n";	cout << "Result is " << (int)search_string(string_class("fortran goodbye hello perturbed"), string_class("hello")) << " (0=FOUND, 1=NOT_FOUND)\n";	cout << "Test 29: search for 'nothere' in the string 'fortran goodbye hello perturbed'\n";	cout << "Result is " << (int)search_string(string_class("fortran goodbye hello perturbed"), string_class("nothere")) << " (0=FOUND, 1=NOT_FOUND)\n";}