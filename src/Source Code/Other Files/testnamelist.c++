#include "define_vars.h"#include "name_object.h"#include "list.c++"// ******* TEST list class using object.h contains only integers ***************// ******* Used in preliminary testing, not required for final system testing **// ******** All code and design MARK JONES *************************************name_list test;											// declare one list structureint main(){	complex_container nameitem;	string_class index;	name_object temp;		char command[4];	// Holds two command input characters and the NULL character	cout << "Formatting of input: \n";	cout << "\tcomplex_container:\n";	cout << "\t\t{\n";	cout << "\t\t\tindicator = CONSTANT | VARIABLE | EXPRESSION\n";	cout << "\t\t\tunion { complex_number : re im     (CONSTANT|VARIABLE\n";	cout << "\t\t\t        expression     : re im			(EXPRESSION)\n";	cout << "\n";	cout << "Commands Available :\n";	cout << "add (index sort)          adi : name complex_container\n";	cout << "add (data sort)           add : name complex_container\n";	cout << "remove...                 rm :  name\n";	cout << "print_list...             prn : no parameters\n";	cout << "\n\n";		while (cin >> command)	// While there is standard input data, read in command	{			if (strcmp(command,"prn") == 0)			// Print out entire list.		{			cout << "ADDRESS of test is " << &test << "\n";			test.printlist();		}			if (strcmp(command,"adi") == 0 ||		// Use C function to check command for				strcmp(command,"add") == 0)		{																		// correct add node instruction.			ordering order;			if (strcmp(command,"adi") == 0)				order = COUNTER;			else				order = DATA;							cin >> index >> nameitem;					// Read in index and data values.			// Load up temp object with the input parameters...			if (temp.set_index(index)==ERROR || temp.set_data(nameitem) == ERROR)				cout << "Invalid add - Index or nameitem out of range\n";			else			{				if (test.add(temp, order, ASCENDING) == ERROR)// Attempt to add the object just defined					cout << "Invalid add - Index match problem\n";				else					{					test.printlist();								// Send list to Standard Output.					cout << "\n";										// Send New-Line to Standard Output				}			}		}							if (strcmp(command,"rm") == 0)			// Use C function to check command for		{																		// correct remove node instruction.			cin >> index;											// Read in index of node to remove			temp.set_index(index);			if (test.remove(temp, COUNTER) == ERROR)	// Attempt to remove the node with this																				// index				cout << "Invalid remove - Node with index " << index <<" not found\n";							test.printlist();									// Send list to Standard Output.			cout << "\n";											// Send New-Line to Standard Output.		}	}	return 0;}