#include <iostream.h>#include "rCalculatorClass.h"#include "newstring.h"#include "calc_preprocessor.h"#include "validator.h"#include "ulist.c++"#include <SIOUX.h>extern const int MAX_IO=1000;const int preprocessor_array_length=46;const user_label labels[preprocessor_array_length]={	user_label ("sqrt", "SQUARE_ROOT"),	user_label ("cbrt", "CUBE_ROOT"),	user_label ("xroot", "XROOT"),	user_label ("sin", "SINE"),	user_label ("cos", "COSINE"),	user_label ("tan", "TANGENT"),	user_label ("asin", "ARCSINE"),	user_label ("acos", "ARCCOSINE"),	user_label ("atan", "ARCTANGENT"),	user_label ("sinh", "SINE-H"),	user_label ("cosh", "COSINE-H"),	user_label ("tanh", "TANGENT-H"),	user_label ("asinh", "ARCSINE-H"),	user_label ("acosh", "ARCCOSINE-H"),	user_label ("atanh", "ARCTANGENT-H"),	user_label ("ln", "NATURAL_LOG"),	user_label ("log10", "LOG10"),	user_label ("log2", "LOG2"),	user_label ("logx", "LOGX"),	user_label ("MILLI", "MILLI"),	user_label ("MICRO", "MICRO"),	user_label ("NANO","NANO"),	user_label ("PICO","PICO"),	user_label ("FEMTO", "FEMTO"),	user_label ("KILO", "KILO"),	user_label ("MEGA", "MEGA"),	user_label ("GIGA", "GIGA"),	user_label ("TERA", "TERA"),	user_label ("PETA", "PETA"),	user_label ("EXA",  "EXA"),	user_label ("SUM", "SUMMATION"),	user_label ("PROD", "PRODATION")};name_object calc_constants[3]={	name_object ("pi", complex_container (CONSTANT, complex(3.1415926535897932385,0))),	name_object ("e", complex_container (CONSTANT, complex(2.7182818284590452354,0))),	name_object ("j", complex_container (CONSTANT, complex(0,1)))};int number_of_constants=3;void main(void){	SIOUXSettings.asktosaveonclose = FALSE;	SIOUXSettings.showstatusline = TRUE;	// lets first set up the constant array for all calculators	calculator::build_internal_constants(calc_constants, number_of_constants);		calculator casio;	calculator temp;			ulist<name_object> test;	cout << test;			calc_preprocessor preprocessor(labels, calculator::token_names, preprocessor_array_length);	// validator expression_checker(&casio, &preprocessor);	// validator temp_expr_checker(&temp, &preprocessor);		char input_string[MAX_IO]="";	string_class input;	char lose_return;	string_ulist user_names;	string_class preprocessed_string;	string_class errors;		complex result;		cout << "I await your instruction, illustrious one...\n";		while (cin >> lose_return)	{		cin.putback(lose_return);		cin.get(input_string, MAX_IO);				input=input_string;				if (input=="verify")		{	//		if (expression_checker.validate()==ERROR)			{				cout << "Master, unfortunately a circular definition has been found...\n";	//			cout << "The following error trace was produced: " << expression_checker.error_trace << "\n";			}	//		else				cout << "Sir, you're definitions are most delectable!\n";		}		else		{			if (input=="all")				cout << casio;			else			{				if (input=="consts")				{					calculator::constant_list.printlist();				}				else				{					if (input=="clear")					{						casio.all_clear();						cout << "Cleared variable and expression lists of super-calculator\n";					}					else					{						if (input=="copy" || input=="peek")						{							if (input=="copy")							{								cout << "copying casio calculator to a temp\n";								temp=casio;							}							else							{								cout << "peeking at data in temp calculator\n";							}							cout << "var list of temp:\n";							temp.get_var_list()->printlist();							cout << "expression list of temp:\n";							temp.get_expression_list()->printlist();							cout << "verification result:\n";/*							if (expression_checker.validate()==ERROR)							{								cout << "Master, unfortunately a circular definition has been found...\n";								cout << "The following error trace was produced: " << expression_checker.error_trace << "\n";							}							else								cout << "Sir, you're definitions are most delectable!\n";														cout << "********************* END OF COPIED DATA INFO *********************\n";							cout << "flushing errors out of temp calculator\n";*/							errors=temp.flush_errors();							if (errors!="")								cout << "ERRORS occurred:\n" << errors;						}						else						{							if (input=="errors")							{								cout << "flushing errors out of casio calculator\n";								errors=casio.flush_errors();								if (errors!="")									cout << "ERRORS occurred:\n" << errors;														}							else							{								preprocessor.preprocess(input, preprocessed_string, &user_names);								result=casio.evaluate(preprocessed_string);								cout << "result is: '" << result << "'\n";							}						}					}				}			}		}	}}