#include "newstring.h"#include "complex.h"#include "ulist.h"#include "stringobject.h"#include "name_object.h"#include "IO_map_object.h"#include "IO_map.h"#include "set_input.h"#include "set_input_object.h"#include "ulist.c++"// loading record_object ("first", ulist<string_object>field_list) works// loading data_set_obj("first_data_obj",data_set data) works// now make a list of record_objects - works ok// now make a list of data_set_obj - works ok// now try initialising data_set - works ok// load IO_map ("1st calc", ulist<string_object> in_fields, "out_field") - works ok// try initialising IO_map - works ok// now make a list of IO_map_object - works okvoid main(void){	// NO LISTS!	// make a record object	// make a data_set_obj based on this record	// make a compatible set_input		ulist<string_object> field_list;		field_list.add(string_object ("1st field"), DATA, ASCENDING);	field_list.add(string_object ("2nd field"), DATA, ASCENDING);	field_list.add(string_object ("3rd field"), DATA, ASCENDING);		record_object record("1st Record", field_list);		data_set_obj data(data_set_obj ("1st data", data_set(record, 10)));		cout << data;		set_input inp1(4,8,1,1);	data.load_real_input(inp1, "1st field");	cout << data;	set_input inp2(0,9,1,1);	data.load_real_input(inp2, "2nd field");		cout << data;		ulist<string_object> inputs;	inputs.add("1st field",DATA, ASCENDING);	inputs.add("2nd field",DATA, ASCENDING);	IO_map_object map("map1",IO_map("calc 1", inputs, "3rd field"));		cout << map;		}