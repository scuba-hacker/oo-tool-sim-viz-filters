class IO_map_object{	private:		string_class name;							// Indexing method - ensures no two names are the same		IO_map map;						// Name containing string, IO_map		IO_map_object *next_IO_map_object;			// Pointer to next IO_map_object node in list		public:			static string_class undefined_index;			// functions required by list				// for the first two constructors - data must be set by using set_data - only allowed to do this once!		IO_map_object(); 															// ******DEFAULT CONSTRUCTOR******		IO_map_object(string_class name);		// as all data has been given - set_data is now deactivated.		IO_map_object(string_class name, IO_map new_map);		string_class get_index();													// Return value of index field		void set_to_next_index(const string_class ref);					// Given index of ref, set index of		status set_index(const string_class setting);					// Set value of index field 				void set_to_first_index();		compare compare_index(const string_class index1, const string_class index2);		IO_map get_data();																// Return value of map field	 	status set_data(const IO_map setting);											// Set value of map field		compare compare_data(const IO_map name1, const IO_map name2);		void set_pointer_to(IO_map_object *p);						// Set next_IO_map_object pointer to the		IO_map_object* get_pointer();																	// Return value of		void print_node();																			// Print Node info		// get/set individual elements of map, not used by list				string_class get_calc_name();		string_class get_output_field();				friend ostream& operator<<(ostream& output_stream, const IO_map_object a);};