#include "define_vars.h"#include "stringobject.h"#include "ulist.c++"// ******* TEST list class using object.h contains only integers ***************// ******* Used in preliminary testing, not required for final system testing **// ******** All code and design MARK JONES *************************************string_ulist test;											// declare one list structurestring_ulist testcopy;int main(){	string_class nameitem;	int index;	string_object temp;		char command[100];	// Holds two command input characters and the NULL character	cout << "Commands Available :\n";	cout << "add (index sort)          adi : index data\n";	cout << "add (data sort)           add : index data\n";	cout << "remove...                 rm : index\n";	cout << "add_to_end...             ade : data\n";	cout << "reset_transverse...       ret : no parameters\n";	cout << "get_transverse...         get : no parameters\n";	cout << "progress_transverse...    pro : no parameters\n";	cout << "change_transverse...      chg : index data\n";	cout << "remove_transverse...      rmt : no parameters\n";	cout << "print_list...             prn : no parameters\n";	cout << "copy list to temp...      cpy : no parameters\n";	cout << "print_temp_list...        prt : no parameters\n";	cout << "\n\n";		while (cin >> command)	// While there is standard input data, read in command	{			if (strcmp(command,"prn") == 0)			// Print out entire list.		{			cout << "ADDRESS of test is " << &test << "\n";			test.printlist();		}			if (strcmp(command,"cpy") == 0)			// Print out entire list.		{			 testcopy = test;		}		if (strcmp(command,"prt") == 0)			// Print out entire list.		{			cout << "ADDRESS of test is " << &testcopy << "\n";			testcopy.printlist();		}			if (strcmp(command,"adi") == 0 ||		// Use C function to check command for				strcmp(command,"add") == 0)		{																		// correct add node instruction.			ordering order;			if (strcmp(command,"adi") == 0)				order = COUNTER;			else				order = DATA;							cin >> index >> nameitem;					// Read in index and data values.			// Load up temp object with the input parameters...			if (temp.set_index(index) == ERROR || temp.set_data(nameitem) == ERROR)				cout << "Invalid add - Index or nameitem out of range\n";			else			{				if (test.add(temp, order, ASCENDING) == ERROR)// Attempt to add the object just defined					cout << "Invalid add - Index match problem\n";				else					{					test.printlist();								// Send list to Standard Output.					cout << "\n";										// Send New-Line to Standard Output				}			}		}					if (strcmp(command,"ade") == 0)			// Use C function to check command for		{																		// correct add_to_end instruction.			cin >> nameitem;									// Read in data value.			// Load up temp object with input parameter...			if (temp.set_data(nameitem) == ERROR)				cout << "Invalid add_to_end -  nameitem out of range\n";			else			{				if (test.add_to_end(temp) == ERROR)					cout << "Insufficient Memory";	// Add the object just defined to end 																					// of list				else				{					test.printlist();								// Send list to Standard Output.					cout << "\n";										// Send New-Line to Standard Output				}			}		}		if (strcmp(command,"ret") == 0)			// Use C function to check command for		{																		// correct reset_transverse instruction.			if (test.reset_transverse() == ERROR) // Reset, transverse points to head.				cout << "Can't reset transverse node - empty list\n";			else				cout << "Transverse pointer resetted to head\n";		}		if (strcmp(command,"get") == 0)			// Use C function to check command for		{																		// correct get_transverse instruction.			if (test.get_transverse(temp) == ERROR)	// Attempt to get transverse node				cout << "Can't get transverse node - empty list or end reached\n";			else			{				cout << "Transverse -> " << temp.get_index() << " ";				cout << temp.get_data() << "\n";			}		}		if (strcmp(command,"pro") == 0)			// Use C function to check command for		{																// correct progress_transverse instruction.			// Attempt to set transverse node to point to next node in the list			if (test.progress_transverse() == ERROR)				cout << "Can't progress transverse node - empty list\n";			else			{				cout << "Traverse has progressed to next node in the list\n";			}		}		if (strcmp(command,"chg") == 0)			// Use C function to check command for		{																// correct progress_transverse instruction.			cin >> index >> nameitem;		// Read in changes to make to transverse node			// Load up temp object with input parameters...			if (temp.set_index(index) || temp.set_data(nameitem) == ERROR)				cout << "Invalid change parameter - index/nameitem out of range\n";			else				if (test.change_transverse_node_to(temp) == ERROR) // Attempt the change					cout << "Can't change transverse node in this way\n";	// Change fail				else					cout << "Traverse node has been changed\n";	// Change Done		}						if (strcmp(command,"rm") == 0)			// Use C function to check command for		{																		// correct remove node instruction.			cin >> index;											// Read in index of node to remove			temp.set_index(index);			if (test.remove(temp, COUNTER) == ERROR)	// Attempt to remove the node with this																				// index				cout << "Invalid remove - Node with index not found\n";							test.printlist();									// Send list to Standard Output.			cout << "\n";											// Send New-Line to Standard Output.		}		if (strcmp(command,"rmt") == 0)			// Use C function to check command for		{																// correct remove_transverse instruction.			if (test.remove_transverse() == ERROR)				cout << "Can't remove transverse node - empty list\n";			else			{				cout << "Traverse node has been removed\n";			}		}	}	return 0;}