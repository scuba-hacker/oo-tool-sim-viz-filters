/************************************************************************************** * HEADER FILE: Data Manager.h * PURPOSE		: declare Data Manager class **************************************************************************************/#ifndef _data_manager_h#define _data_manager_h#include "set_input_object.h"																// List node definition files#include "record_object.h"#include "IO_map_object.h"#include "data_set_obj.h"#include "record_object.h"#include "name_object.h"#include "stringobject.h"#include "newstring.h"																			// foundation definition files#include "complex.h"#include "ulist.h"#include <iostream.h>#include <strstream.h>class data_manager{	public:		ulist<record_object> record_list;										// Ascending lexical order on name		ulist<data_set_obj> data_list;											// Ascending lexical order on name		ulist<IO_map_object> map_list;											// Ascending lexical order on name		ulist<set_input_object> set_input_list;							// Ascending lexical order on name						void interface();																										// User Interface		void display_help();																// Display CLI commands on-screen			// Functions for manipulating record_list		status new_record(string_class name, string_class record);					// Add record		status delete_record(string_class name);														// Delete record		void output_record_list();																// Dump record list to cout				// Functions for manipulating data_list		status new_data(string_class name, string_class record, int length);// Add data_set		status delete_data(string_class name);															// Delete data_set		void output_data_list();																// Dump data_set list to cout		// Function to cross-check data manager lists		status check_data_list(string_class data_name, ulist<string_object> inputfields,																		ulist<string_object> mapnames, data_set_obj* &target);				// Functions for manipulating map_list		status new_map(string_class map_name, string_class input_fields,				// Add IO_map									 string_class output_fields);		status delete_map(string_class map_name);																// Del IO_map		void output_map_list();																		// Dump IO_map list to cout				// Functions for manipulating set_input_list		status new_set_input(string_class set_input_name, int lower_i,				// Add set_input												 int upper_i, double start_val, double increment);		status delete_set_input(string_class set_input_name);									// Del set_input		void output_set_input_list();														// Dump set_input list to cout		// Function to check all names in string ulist reference valid set_input objects		status check_set_input_list(ulist<string_object> sourcelist);		void reset_manager();																								// Clear all lists};#endif