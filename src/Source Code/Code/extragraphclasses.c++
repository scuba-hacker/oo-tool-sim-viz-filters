/************************************************************************************** * CODE FILE: extragraphclasses.c++ * PURPOSE	: define members of: port_info class *															 border_info class *															 border_info class *															 bound_info class *															 scale_info class *															 range_info class *															 tick_info class **************************************************************************************/#include "extragraphclasses.h"// Define port_info default constructorport_info::port_info (double WIDTH, double HEIGHT){	top=50;	left=50;	width=WIDTH;	height=HEIGHT;}// Define port_info parameterized constructorport_info::port_info (double TOP, double LEFT, double WIDTH, double HEIGHT){	top=TOP;	left=LEFT;	width=WIDTH;	height=HEIGHT;}// Define border_info default constructorborder_info::border_info (double TOP, double BOTTOM, double LEFT, double RIGHT){	top=TOP;	bottom=BOTTOM;	left=LEFT;	right=RIGHT;}// Define bound_info default constructorbound_info::bound_info(){	top=0;	bottom=0;	left=0;	right=0;	width=0;	height=0;}// Define scale_info default constructorscale_info::scale_info (double MAJ, double MIN){	MajScale=MAJ;	MinTicks=MIN;}		// Define range_info default constructorrange_info::range_info (double MIN, double MAX){ 	Max=MAX;	Min=MIN;}// Define range_info method to return absolute range sizedouble range_info::range(){ return Max-Min; }// Define tick_info default constructortick_info::tick_info(double MAJ, double MIN){	MajTickSize=MAJ;	MinTickSize=MIN;}// Define overloaded output operator for port_infoostream& operator<<(ostream& output_stream, port_info port){	output_stream << "top=" << port.top << ", left=" << port.left << ", width=";	output_stream << port.width << ", height=" << port.height;	return output_stream;}// Define overloaded output operator for border_infoostream& operator<<(ostream& output_stream, border_info border){	output_stream << "top=" << border.top << ", bottom=" << border.bottom << ", left=";	output_stream << border.left << ", right=" << border.right;	return output_stream;}// Define overloaded output operator for bound_infoostream& operator<<(ostream& output_stream, bound_info bound){	output_stream << "top=" << bound.top << ", bottom=" << bound.bottom;	output_stream << ", left=" << bound.left << ", right=" << bound.right << ", width=";	output_stream << bound.width << ", height=" << bound.height;	return output_stream;}// Define overloaded output operator for scale_infoostream& operator<<(ostream& output_stream, scale_info scale){	output_stream << "scale=" << scale.MajScale << ", divs=" << scale.MinTicks;	return output_stream;}// Define overloaded output operator for range_infoostream& operator<<(ostream& output_stream, range_info range){	output_stream << "min=" << range.Min << ", max=" << range.Max;	return output_stream;}// Define overloaded output operator for tick_infoostream& operator<<(ostream& output_stream, tick_info tick){			output_stream << "MajTickSize=" << tick.MajTickSize << ", MinTickSize=";	output_stream << tick.MinTickSize;	return output_stream;}// Define overloaded input operator for scale_infoistream& operator>>(istream& input_stream, scale_info& scale){	cout << "Scale Division? ";	input_stream >> scale.MajScale;	cout << "Inter-Divisions? ";	input_stream >> scale.MinTicks;	return input_stream;}// Define overloaded input operator for range_infoistream& operator>>(istream& input_stream, range_info& range){	cout << "Range Min? ";	input_stream >> range.Min;	cout << "Range Max? ";	input_stream >> range.Max;	return input_stream;}