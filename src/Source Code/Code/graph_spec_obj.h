/************************************************************************************** * HEADER FILE: graph_spec_obj.h * PURPOSE		: declare graph_spec_obj class **************************************************************************************/#ifndef _graph_spec_obj_h#define _graph_spec_obj_h#include "newstring.h"#include "graph_spec.h"#include "define_vars.h"class graph_spec_obj{	private:		string_class name;																								// Indexing object		graph_spec spec;																									// Data object		graph_spec_obj *next_graph_spec_obj;															// Used to form list	public:		static string_class undefined_index;				// Holds definition of an undefined index		// Functions required by list		graph_spec_obj();																					// Default constructor		graph_spec_obj(string_class name);												// String_class constructor		// string_class/complex container constructor		graph_spec_obj(string_class name, graph_spec new_spec);		graph_spec_obj(graph_spec_obj &original);									// Copy constructor		graph_spec_obj& operator=( graph_spec_obj &original);			// Overloaded = operator		string_class get_index();															// Return value of index field		status set_index(const string_class setting);					// Set value of index field 				void set_to_first_index();														// Return first index value		void set_to_next_index(const string_class ref);				// Return next index value		compare compare_index(const string_class index1,			// Return comparison between													const string_class index2);			// two index objects															graph_spec get_data();																// Return value of data field	 	status set_data(const graph_spec setting);						// Set value of data field		compare compare_data(const graph_spec name1,					// Return comparison between												 const graph_spec name2);					// two data objects												 		void set_pointer_to(graph_spec_obj *p);								// Set pointer field		graph_spec_obj* get_pointer();												// Return value of pointer field		void print_node();																		// Print Node info				// Overloaded output operator for name_object		friend ostream& operator<<(ostream& output_stream, const graph_spec_obj a);};#endif