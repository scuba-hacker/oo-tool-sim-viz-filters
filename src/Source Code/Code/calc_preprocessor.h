/************************************************************************************** * HEADER FILE: calc_preprocessor.h * PURPOSE		: declare calc_preprocessor class **************************************************************************************/#ifndef _calc_preprocessor_h#define _calc_preprocessor_h#include "rCalculatorUserTypes.h"#include "newstring.h"#include "rCalculatorClass.h"#include "preprocessorTypes.h"#include <iostream.h>#include "ulist.h"#include "stringobject.h"class calc_preprocessor{		private:		token_name *correlator;													// Preprocess -  username->calc_token		string_class inverse_correlator[256];						// Postprocess - calc_token->username				int array_length;																// Length of Correlator		istrstream *input_stream;												// Used for handing strings		char *input_char_array;													// Used with istrstreams		status set_input(string_class input_string);		// Used to initialise istrstreams		status reset_input();														// Used to terminate istrstreams			public:		// Constructor which initialises all internal conversion tables		calc_preprocessor(const user_label *input_labels,											const token_name *token_mappings, const int array_length);		~calc_preprocessor();																								// Destructor 				// Method for converting string containing usernames->string containing calc tokens		void preprocess(string_class input_string, string_class &output_string);		// Same as above - additionally returns list of unidentified usernames		void preprocess(string_class input_string, string_class &output_string,										 ulist<string_object> *unidentified);		// Method for converting string containing calc tokens->string containing usernames		void postprocess(const string_class &input_string,string_class &postprocessed_string);};#endif