/************************************************************************************** * HEADER FILE: CalculatorManager.h * PURPOSE		: declare calculator_manager class **************************************************************************************/#include "rCalculatorClass.h"#include "calc_preprocessor.h"#include "validator.h"#include "calcobject.h"#include "newstring.h"#include <iostream.h>class calculator_manager{	private:		ulist<calc_object> calc_list;						// List of calc_object objects ordered on name		calc_object *current_calc;							// Pointer to calc_object currently accessed		calc_preprocessor *preprocessor;				// Preprocesses user input, converts to tokens		validator *equation_checker;						// Validates equation_list of calc_object			public:		calculator_manager(calc_preprocessor *preprocess);				// Parameterized Constructor		~calculator_manager();																		// Destructor		calculator_manager(calculator_manager &original);							// Copy Constructor		calculator_manager& operator=(calculator_manager &source);		// Overloaded = operator				// Functions for manipulating calc_object list		status add_calculator(const string_class name);		status remove_calculator(const string_class name);		// Function for directing orders to a particular calc_object in the calculator list		status set_current_calc(const string_class name_string="");		// Send order (expression/assignment/definition) to current calculator for evaluation		complex process_order(const string_class &calc_order);		// Output all variables and equations stored in current calculator				ostream& current_storage(ostream &output_stream);		// Output error report stored in current calculator		ostream& current_errors(ostream &output_stream);		// Clear error report stored in current calculator		string_class current_clear_errors();		// Validate all equations in current calculator for circular definitions		status validate_current();															// Use when auto-verify is off		// Clear all variables & equations in current calculator		string_class clear_memory();		// Clear variable or equation with particular 'name' in current calculator		string_class clear_single_memory(string_class name);		// Output names and variables/equations stored in all calc_objects in calculator list		friend ostream& operator<<(ostream& output_stream, calculator_manager &output);		void interface();																// CLI for accessing member functions		void display_help();														// Display CLI commands on-screen		string_class get_current_calc();								// Return name of current calculator				void auto_verify_on();													// Turn on auto-checking of equations		void auto_verify_off();													// Turn off auto-checking of equations		void reset_manager();														// Clear calculator list};