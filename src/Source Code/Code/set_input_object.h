/************************************************************************************** * HEADER FILE: set_input_object.h * PURPOSE		: declare set_input_object class **************************************************************************************/#ifndef _set_input_object_h#define _set_input_object_h#include "newstring.h"#include "define_vars.h"#include "set_input.h"#include <iostream.h>class set_input_object{	private:		string_class name;																							// Indexing object		set_input load_data;																						// Data object		set_input_object *next_set_input_object;												// Used to form list			public:		static string_class undefined_index;				// Holds definition of an undefined index		// Functions required by list		set_input_object();																				// Default constructor		set_input_object(string_class name_string);								// String_class constructor		// string_class/set_input constructor		set_input_object(string_class name_string, set_input data);		set_input_object(set_input_object &original);									// Copy constructor		set_input_object& operator=(set_input_object &original);			// Overloaded =				string_class get_index();															// Return value of index field		status set_index(const string_class setting);					// Set value of index field 				void set_to_first_index();														// Return first index value		void set_to_next_index(const string_class ref);				// Return next index value		compare compare_index(const string_class index1,			// Return comparison between													const string_class index2);			// two index objects															set_input get_data();																	// Return value of data field		status set_data(const set_input setting);							// Set value of data field		compare compare_data(const set_input name1,						// Return comparison between												 const set_input name2);					// two data objects		void set_pointer_to(set_input_object *p);							// Set pointer field		set_input_object* get_pointer();											// Return value of pointer field		void print_node();																		// Print Node info		// Overloaded output operator for name_object		friend ostream& operator<<(ostream& output_stream, const set_input_object a);};#endif