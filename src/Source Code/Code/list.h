/*////////////////////////////////////////////////////////////////////////////////Filename: 		list.h  (list.C contains functions)Author:				M.B. JonesRequires:			define_vars.h object.h wordobject.hApplication:	testwordlist.CPurpose:			Templated list class with generic node object.							Minimum spec for node object is object.h							Facilites for:								- maintaining a list of a particular node type.								- external protected traversal of the list.								- adding nodes with no order, order on index or data									item in the Node, in both ascending and descending forms.								- efficient add_to_end to append node to end of list.								-	removing nodes based upon index or data values.Extra:				Due to g++ limitations, all node object definitions must be							included, and template definitions/typedefs must be present.////////////////////////////////////////////////////////////////////////////////*/#include "define_vars.h"										// Contains all constants and enums#include "name_object.h"#ifndef _list_h#define _list_htemplate <class node>class list	{	private:		node *head;															// Points to first node 		node *tail;															// Points to last node		node *current;													// Utility pointer		node *transverse;												// Traverse pointer - controlled																						// by user using transverse functions				// Search for searchitem using ordering method (COUNTER/DATA)		node* search(node searchitem, ordering method);			// Search for insertion position for target using ordering comparisontype		// and orderproperty direction (ASCENDING/DESCENDING)		void find_neighbours(node* target, node* &preceding,	node* &proceding,												ordering comparisontype, orderproperty direction);	public:		list(void);				list(list &original);											// List copy constructor function		void clearlist(void);													// Removes all nodes from list		~list(void);																			// List destructor function		// +++++++++++++ AUTOMATIC ORDERING ADD/REMOVE FUNCTIONS +++++++++++++++++++				// Add copy of newitem to the list. Insertion position determined by value		// of order (COUNTER/DATA) and value of direction (ASCENDING/DESCENDING).		status add(node newitem, ordering order,	orderproperty direction);				// Remove node containing index or data, contained in item. The search		// criteria (index/data) is determined by 'method' value, (COUNTER/DATA)		status remove(node item, ordering method);			status add_to_end(node newitem);		// Append copy of newitem to end of list																		 		// ++++++++++++++++++++++ TRANSVERSE FUNCTIONS +++++++++++++++++++++++++++++				status reset_transverse();							// Reset transverse to start of list				status get_transverse(node &gotitem);						// Copy node that transverse																										// points to, to gotitem.																												status progress_transverse();								// Move transverse to next node.																			status change_transverse_node_to(node setitem);	// Copy setitem into node		 																								// pointed to by transverse		 																																	status remove_transverse();													// Remove the node		 																										// transverse points to 																			// ++++++++++++++++++++++ MISCELLANEOUS FUNCTIONS ++++++++++++++++++++++++++		void printlist();													// Display list on standard output																				list<node>* operator=(list<node> &source);						// = operator overload																		};#endif