/************************************************************************************** * HEADER FILE: record_object.h * PURPOSE		: declare record_object class **************************************************************************************/#ifndef _record_object_h#define _record_object_h#include "newstring.h"#include "stringobject.h"#include "ulist.h"#include "define_vars.h"#include <iostream.h>class record_object{	private:		string_class name;																								// Indexing object		ulist<string_object> data;																				// Data object		record_object *next_record_object;																// Used to form list			public:		static string_class undefined_index;				// Holds definition of an undefined index		// functions required by list		record_object() ; 																				// Default constructor		record_object(string_class name_string);									// string_class constructor		// string_class/ulist<string_object> constructor		record_object(string_class name_string, ulist<string_object> data_list);				record_object(record_object &original);										// Copy Constructor		record_object& operator=( record_object &original);				// Overloaded =		string_class get_index();															// Return value of index field		status set_index(const string_class setting);					// Set value of index field 				void set_to_first_index();														// Return first index value		void set_to_next_index(const string_class ref);				// Return next index value		compare compare_index(const string_class index1,			// Return comparison between													const string_class index2);			// two index objects															ulist<string_object> get_data();											// Return value of data field		status set_data(ulist<string_object> setting);				// Set value of data field		compare compare_data(ulist<string_object> name1,			// Return comparison between												 ulist<string_object> name2);			// two data objects		void set_pointer_to(record_object *p);								// Set pointer field		record_object* get_pointer();													// Return value of pointer field		void print_node();																		// Print Node info		// Overloaded output operator for record_object		friend ostream& operator<<(ostream& output_stream, record_object a);};#endif