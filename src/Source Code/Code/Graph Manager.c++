/************************************************************************************** * CODE FILE: Graph Manager.c++ * PURPOSE	: define members of graph_manager class **************************************************************************************/#include "Graph Manager.h"// Define CLI using cin/cout streams for accessing graph_manager functionsvoid graph_manager::interface(){	const int MAX_IO=1000;														// Define Buffer size for input/output	char input_string[MAX_IO]="";											// Initialise primary input char array	char input[MAX_IO]="";														// Initialise second input char array	string_class name;																// Define name holder		cout << "\nGraph Manager> ";													// Output manager prompt	while (cin >> input_string)														// Main interface loop	{		if (strcmp(input_string,"help")==0)									// Command displaying commands		{			display_help();			goto prompt3;		}				if (strcmp(input_string,"newspec")==0)							// Command for adding graph spec		{			cin >> name;																			// Get identifier for spec			graph_spec spec_input;																	cin >> spec_input;																// Get spec info			new_spec(name, spec_input);												// Add new spec to list			goto prompt3;																			// Jump to end of interface loop		}				if (strcmp(input_string,"delspec")==0)							// Command for deleting graph spec		{			cin >> name;																			// Get identifier for spec			delete_spec(name);																// Delete specified spec from list			goto prompt3;																			// Jump to end of interface loop		}				if (strcmp(input_string,"specs")==0)								// Command to output spec list		{			output_spec_list();																// Output spec list			goto prompt3;																			// Jump to end of interface loop		}		if (strcmp(input_string,"resetmanager")==0)					// Command to output spec list		{			reset_manager();																	// Output spec list			goto prompt3;																			// Jump to end of interface loop		}				if (strcmp(input_string,"return")==0)								// Break out of the CLI			break;				prompt3:																						// End of loop label		cout << "\nGraph Manager> ";												// Output manager prompt	}}void graph_manager::display_help(){	cout << "Commands Available:\n";										// Dump commands to standand output	cout << "\t newspec <spec_name>\n";	cout << "\t delspec <spec_name>\n";	cout << "\t specs\n";	cout << "\t resetmanager\n";	cout << "\t return\n";	cout << "\t help\n\n";}		// Define method for adding graph spec with identifying name to spec_liststatus graph_manager::new_spec(string_class name, graph_spec new_spec){	// Add to list using ascending lexical order	if (spec_list.add(graph_spec_obj (name, new_spec), COUNTER, ASCENDING)==ERROR)	{		cout << "ERROR: graph spec name must be unique to this list\n";		return ERROR;	}	else		return SUCCESS;}// Define method for deleting graph spec with identifying name from spec_liststatus graph_manager::delete_spec(string_class name){	if (spec_list.remove(name, COUNTER)==ERROR)	{		cout << "ERROR: no such spec exists\n";		return ERROR;	}	else		return SUCCESS;}// Define method for outputting spec_listvoid graph_manager::output_spec_list(){	cout << spec_list; }// Define function to clear internal listsvoid graph_manager::reset_manager(){	spec_list.clearlist(); }