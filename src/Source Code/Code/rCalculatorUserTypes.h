/************************************************************************************** * HEADER FILE: rCalculatorUserTypes.h * PURPOSE		: declare enums token_value, macro_type, calculator_type; *							declare classes token_name, calculator_symbol **************************************************************************************/#ifndef _rCalculatorUserTypes_h#define _rCalculatorUserTypes_h#include <string.h>#include <iostream.h>#include <strstream.h>#include <ctype.h>#include <math.h>#include "complex.h"#include "newstring.h"// 'token_value' contains an enumeration of all tokens understood by calculator class.// Each token name is associated with a single integer which is interpreted as an unsigned// ASCII character, ranged over 0-255. Special key combinations to obtain characters with// ASCII code > 128 are given on appropriate lines of the enumeration.enum token_value{	NAME,		NUMBER,		END,																							// \0 \1 \2	PLUS='+', 	MINUS='-',	MUL='*',	DIV='/',													// + - * /	POW='^', FACTORIAL='!', SQRT='@', CBRT='£',  ROOTX='$',							// ^ ! @ £ $	SIN='¡', COS='™', TAN='#', ASIN='¢', ACOS='∞', ATAN='§',						// Alt 1 2 3 4 5 6	SINH='~',COSH='Ω',TANH='≈', ASINH='ç', ACOSH='√', ATANH='∫',				// ~ Alt z x c v b	LN='¶', LOG10='•', LOG2='ª', LOGX='º',															// Alt 7 8 9 0	PRINT=';',	ASSIGN_CONSTANT='=', LP='(', RP=')',										// ; = ( )	LM='[', RM=']', ARGUMENT='≠',																				// [ ] Alt =	MILLI='œ', MICRO='∑', NANO='®', PICO='†', FEMTO='¥',								// Alt q w r t y	KILO='å', MEGA='ß', GIGA='∂', TERA='ƒ', PETA='©', EXA='∆',					// Alt a s d f g j	DEFINE_EQUATION=':', SUMMATION='¬', PRODATION='∏',									// : Alt l P	COMMA=',', REAL='≤', IMAGINARY='≥', WINDOW='÷'											// , Alt < > ÷};// 'macro_type' is used to distinguish between the two types of data stored in complex_// container class. 'CONSTANT' signifies a fixed complex_number is stored, whereas// 'EQUATION' signifies a string_class object is stored.enum macro_type{ CONSTANT, EQUATION };// 'calculator_type' is used to determine between a calculator created by the user (SUPER_// CALCULATOR - capable of assignment of variables/equations) and those created on-the-fly// by a SUPER_CALCULATOR, called SUB_CALCULATORs, which are used to perform recursive// calculations on behalf of a SUPER_CALCULATOR.enum calculator_type{ SUPER_CALCULATOR, SUB_CALCULATOR };// 'token_name' is used to map an OPERATION string_class to a character token.// OPERATIONs are common to both preprocessor and calculator. Character tokens are// local to the calculator. class token_name{	public:		string_class name;																					// Holds OPERATION		char token;																									// Holds calculator token			// Default Constructor			token_name();		// Parameterized Constructor		token_name(const char *tokenname, const char token_character);		// Overloaded output operator		friend ostream& operator<<(ostream& output_stream, const token_name output);};// 'calculator_symbol' is used to hold the current symbol read in by calculator class// from the input stream. It holds a single token_value corresponding to the// interpretation of the character token read in. It also holds either a complex number,// or a string_class depending upon the particular token_value stored. Information is// stored mutually exclusively between  (complex/string_class).class calculator_symbol{	public:		token_value token;						// Holds character token equivalent enum		complex number_value;					// Holds complex number operand associated with token		string_class name_string;			// Holds string_class operand associated with token		void clear();									// Initalises all data members};#define _rCalculatorUserTypes_h#endif