/************************************************************************************** * HEADER FILE: data_set_obj.h * PURPOSE		: declare data_set_obj class **************************************************************************************/#ifndef _data_set_obj_h#define _data_set_obj_h#include "newstring.h"#include "data_set.h"#include "define_vars.h"#include <iostream.h>class data_set_obj{	private:		string_class name;																								// Indexing object		data_set data;																										// Data object		data_set_obj *next_data_set_obj;																	// Used to form list			public:		static string_class undefined_index;				// Holds definition of an undefined index		// functions required by list		data_set_obj(); 																								// Default constructor		data_set_obj(string_class name_string);													// string_class const.		// string_class/data_set constructor		data_set_obj(string_class name_string, data_set data_list);		data_set_obj(data_set_obj &original);														// Copy Constructor		data_set_obj& operator=(data_set_obj &original);								// Overloaded =				string_class get_index();															// Return value of index field		status set_index(const string_class setting);					// Set value of index field 				void set_to_first_index();														// Return first index value		void set_to_next_index(const string_class ref);				// Return next index value		compare compare_index(const string_class index1,			// Return comparison between													const string_class index2);			// two index objects															data_set get_data();																	// Return value of data field		status set_data(const data_set setting);							// Set value of data field		compare compare_data(const data_set name1,						// Return comparison between												 const data_set name2);						// two data objects		void set_pointer_to(data_set_obj *p);									// Set pointer field		data_set_obj* get_pointer();													// Return value of pointer field		void print_node();																		// Print Node info		// Overloaded output operator for data_set_obj		friend ostream& operator<<(ostream& output_stream, const data_set_obj a);		// Get/Set individual elements of data object; not used by ulist...		status get_element_assoc(complex &result, const int index, const string_class field);		status set_element_assoc(const complex new_value, const int index,														 const string_class field);				status get_element(complex &result, const int index, const int field_index);		status set_element(const complex new_value, const int index, const int field_index);				status clear_data_array();															// Set all elements to 0+0j		// Functions for accessing data_set data member		int get_length();		int get_width();		void get_fields(string_class *storage);		// Function for applying set_input to field 'field' of data_set object (data)		status load_real_input(set_input &input, string_class field);		// Function for returning pointer to data_set private data member		data_set *get_data_set_pointer();};#endif