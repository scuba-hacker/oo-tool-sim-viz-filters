/************************************************************************************** * HEADER FILE: name_object.h * PURPOSE		: declare name_object class **************************************************************************************/ #ifndef _name_object_h#define _name_object_h#include "newstring.h"#include "extraclasses.h"#include "define_vars.h"class name_object{	private:		string_class name;																								// Indexing object		complex_container data;																						// Data object		name_object *next_name_object;																		// Used to form list			public:		static string_class undefined_index;				// Holds definition of an undefined index		// Functions required by ulist...		name_object() ; 																								// Default constructor		// string_class/complex container constructor		name_object(const string_class string, const complex_container complex_field=								complex_container(CONSTANT, complex(0, 0)) );				// char array/complex container constructor		name_object(const char *string, const complex_container complex_field=								complex_container(CONSTANT, complex(0, 0)) );										name_object(const name_object &original);												// Copy constructor		name_object& operator=(name_object &source);										// Overloaded =		string_class get_index();															// Return value of index field		status set_index(const string_class setting);					// Set value of index field 				void set_to_first_index();														// Return first index value		void set_to_next_index(const string_class ref);				// Return next index value		compare compare_index(const string_class index1,			// Return comparison between													const string_class index2);			// two index objects															complex_container get_data();													// Return value of data field	  status set_data(const complex_container setting);			// Set value of data field		compare compare_data(const complex_container name1,		// Return comparison between												 const complex_container name2);	// two data objects												 		void set_pointer_to(name_object *p);									// Set pointer field		name_object* get_pointer();														// Return value of pointer field		void print_node();																		// Print Node info		// Get/Set individual elements of data object; not used by ulist...		// Manipulate the complex number inside complex container data object		complex get_complex();		void set_complex(const complex new_complex);				// Manipulate the macro_type (VARIABLE/EQUATION) inside complex container data object		macro_type get_indicator();		void set_indicator(const macro_type new_indicator);		// Manipulate the string_class inside complex container data object		string_class get_equation();		void set_equation(const string_class new_equation);				// Overloaded output operator for name_object		friend ostream& operator<<(ostream& output_stream, const name_object a);};#endif