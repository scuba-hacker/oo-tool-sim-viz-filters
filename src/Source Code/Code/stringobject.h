/************************************************************************************** * HEADER FILE: stringobject.h * PURPOSE		: declare stringobject class **************************************************************************************/#ifndef _stringobject_h#define _stringobject_h#include "define_vars.h"#include "newstring.h"class string_object{													private:		int index;																												// Indexing object		string_class string;																							// Data object		string_object *next_string_object;																// Used to form list	public:		static int undefined_index;									// Holds definition of an undefined index		string_object();																					// Default Constructor		string_object(const string_class original);								// String_class constructor		string_object(const string_object &original);							// Copy Constructor		string_object& operator=(string_object &source);					// Overloaded = operator				int get_index();																			// Return value of index field		status set_index(const int setting);									// Set value of index field 		void set_to_first_index();														// Return first index value		status set_to_next_index(const int ref);							// Return next index value		compare compare_index(const int index1, const int index2);	// Compare two index objs		string_class get_data();															// Return value of data field		status set_data(const string_class set_string);				// Set value of data field		compare compare_data(const string_class data1,				// Return comparison between												 const string_class data2);				// two data objects			void set_pointer_to(string_object *p);								// Set pointer field		string_object* get_pointer();													// Return value of pointer field		void print_node();																		// Print Node info		// Overloaded output operator for name_object		friend ostream& operator<<(ostream& output_stream, const string_object a);};#endif