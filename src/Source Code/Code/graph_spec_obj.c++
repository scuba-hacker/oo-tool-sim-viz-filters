/************************************************************************************** * CODE FILE: graph_spec_obj.c++ * PURPOSE	: define members of graph_spec_obj class **************************************************************************************/#include "graph_spec_obj.h"// Define default constructorgraph_spec_obj::graph_spec_obj() {	next_graph_spec_obj = NULL;	name=graph_spec_obj::undefined_index;}// Define constructor using string_class to initialisegraph_spec_obj::graph_spec_obj(string_class graph_name){	next_graph_spec_obj = NULL;	name=graph_name;} // Define constructor using string_class and new_graph_spec to initialisegraph_spec_obj::graph_spec_obj(string_class graph_name, graph_spec new_graph_spec){		next_graph_spec_obj = NULL;	name=graph_name;	spec=new_graph_spec;}// Define copy constructorgraph_spec_obj::graph_spec_obj(graph_spec_obj &original){	next_graph_spec_obj=original.next_graph_spec_obj;	name=original.name;	spec=original.spec;}// Define assignment of graph_spec_obj objects by graph_spec_obj objectsgraph_spec_obj& graph_spec_obj::operator=(graph_spec_obj &original){	next_graph_spec_obj=original.next_graph_spec_obj;	name=original.name;	spec=original.spec;	return *this;}// Define method for extracting index fieldstring_class graph_spec_obj::get_index(){ return name; }// Define method for setting index fieldstatus graph_spec_obj::set_index(const string_class setting){	name=setting;	return SUCCESS;}// Define method for defining index of first object in list, if index not specifiedvoid graph_spec_obj::set_to_first_index(){ name="a"; }// Define method for defining incremental indexing across the list, head->tailvoid graph_spec_obj::set_to_next_index(const string_class ref){	name=ref+"a"; }// Define method for comparing two index objects - lexical comparison of string_classcompare graph_spec_obj::compare_index(const string_class index1,																			const string_class index2){	if (index1>index2)		return LARGER;	else		if (index1==index2)			return EQUAL;		else			return SMALLER;}			// Define method for extracting data fieldgraph_spec graph_spec_obj::get_data(){ return spec; }	// Define method for setting data fieldstatus graph_spec_obj::set_data(graph_spec setting){			spec=setting;	return SUCCESS;}	// Define method for comparing two data objects - comparison grapg_speccompare graph_spec_obj::compare_data(const graph_spec name1, const graph_spec name2){	#pragma unused (name1)	#pragma unused (name2)	return SMALLER;																			 // Arbitrary ordering on graph_spec}// Define method for setting pointer fieldvoid graph_spec_obj::set_pointer_to(graph_spec_obj *p){ next_graph_spec_obj=p; }// Define method for extracting pointer fieldgraph_spec_obj* graph_spec_obj::get_pointer(){ return next_graph_spec_obj; }	// Define method for outputting name_object contents on standard outputvoid graph_spec_obj::print_node(){cout << name << "-> " << spec;}// Define overloaded output operator for name_objectostream& operator<<(ostream& output_stream, graph_spec_obj a){	output_stream << a.name << "->" << a.spec;	return output_stream;}// Define undefined index as empty stringstring_class graph_spec_obj::undefined_index="";