/************************************************************************************** * HEADER FILE: data_set.h * PURPOSE		: declare data_set class **************************************************************************************/#ifndef _data_set_h#define _data_set_h#include "newstring.h"#include "stringobject.h"#include "ulist.h"#include "complex.h"#include "record_object.h"#include "set_input_object.h"class data_set{	private:		string_class record_name;																	// Template record name		int length;																								// Length of data set array		int width;																								// Width of data set array		complex *data_array;																			// Data set array pointer		string_class *fields;																			// Associative Fields pointer			public:		data_set();																										// Default constructor		// record_object/int constructor				data_set(record_object record_ob, const int array_length);		data_set(const data_set &original);														// Copy constructor		data_set& operator=(const data_set &original);								// Overloaded = operator		~data_set();																									// Destructor				string_class get_record_name();																// Return record name		// data_array element access - associative field, non-associative integer index		status get_element_assoc(complex &result, const int index, const string_class field);		status set_element_assoc(const complex new_value, const int index,														 const string_class field);		// data_array element access - non-associative field (int) and index (int)		status get_element(complex &result, const int index, const int field);		status set_element(const complex new_value, const int index, const int field);				status clear_data_array();															// Set all elements to 0+0j				int get_length();																				// Return length of data_array		int get_width();																				// Return width of data_array		void get_fields(string_class *storage);									// Return record names				// Overloaded output operator for data_set object		friend ostream& operator<<(ostream& output_stream, const data_set output_set);};#endif