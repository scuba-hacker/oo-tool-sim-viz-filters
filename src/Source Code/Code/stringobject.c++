/************************************************************************************** * CODE FILE: stringobject.c++ * PURPOSE	: define members of string_object class **************************************************************************************/#include "stringobject.h"// Define default constructorstring_object::string_object()	{	next_string_object = NULL;	string = "";	index = string_object::undefined_index;}// Define constructor using string_classstring_object::string_object(const string_class original){	string=original;	next_string_object = NULL;	index = string_object::undefined_index;}// Define copy constructorstring_object::string_object(const string_object &original){	index=original.index;	string=original.string;	next_string_object=original.next_string_object;}// Define assignment of string_object objects by string_object objectsstring_object& string_object::operator=(string_object &source){	string=source.string;	next_string_object=source.next_string_object;	index=source.index;	return *this;}// Define method for extracting index fieldint string_object::get_index()	{ return index; }	// Define method for setting index fieldstatus string_object::set_index(const int setting){	if (setting >= 0)							{			index = setting;				return SUCCESS;	}	else	{		cout << " Set index out of range error\n";		return ERROR;	}}// Define method for defining index of first object in list, if index not specifiedvoid string_object::set_to_first_index(){	index=1; }// Define method for defining incremental indexing across the list, head->tailstatus string_object::set_to_next_index(const int ref){	index=ref+1;	return SUCCESS;}// Define method for comparing two index objectscompare string_object::compare_index(const int index1, const int index2){	if (index1>index2)		return LARGER;	else		if (index1==index2)			return EQUAL;		else			return SMALLER;}// Define method for extracting data fieldstring_class string_object::get_data(){ return string; }	// Define method for setting data fieldstatus string_object::set_data(const string_class set_string){	string=set_string;	return SUCCESS;}// Define method for comparing two data objects (string_class)compare string_object::compare_data(const string_class data1, const string_class data2){	if (data1>data2)		return LARGER;	else		if (data1==data2)			return EQUAL;		else			return SMALLER;}// Define method for setting pointer fieldvoid string_object::set_pointer_to(string_object *p){ next_string_object=p; }// Define method for extracting pointer fieldstring_object* string_object::get_pointer()	{ return next_string_object; }	// Define method for outputting name_object contents on standard outputvoid string_object::print_node()	{	cout << index << ' ' << string; }// Define overloaded output operator for string_objectostream& operator<<(ostream& output_stream, const string_object a){	output_stream << a.index << ' ' << a.string;	return output_stream;}// Define undefined index as 0int string_object::undefined_index=0;