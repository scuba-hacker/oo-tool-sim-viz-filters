#ifndef _data_set_obj_h#define _data_set_obj_h#include "newstring.h"#include "data_set.h"#include "define_vars.h"#include <iostream.h>class data_set_obj{	private:		string_class name;								// Indexing method - ensures no two names are the same		data_set data;						// Name containing string, data_set		data_set_obj *next_data_set_obj;		// Pointer to next data_set_obj node in list			public:			static string_class undefined_index;			// functions required by list				// for the first two constructors - data must be set by using set_data - only allowed to do this once!		data_set_obj(); 															// ******DEFAULT CONSTRUCTOR******		data_set_obj(string_class name_string);		// as all data has been given - set_data is now deactivated.		data_set_obj(string_class name_string, data_set data_list);		data_set_obj(data_set_obj &original);		data_set_obj& operator=(data_set_obj &original);				string_class get_index();													// Return value of index field		void set_to_next_index(const string_class ref);					// Given index of ref, set index of		status set_index(const string_class setting);					// Set value of index field 				void set_to_first_index();		compare compare_index(const string_class index1, const string_class index2);		data_set get_data();																// Return value of data field		status set_data(const data_set setting);											// Set value of data field		compare compare_data(const data_set name1, const data_set name2);		void set_pointer_to(data_set_obj *p);						// Set next_data_set_obj pointer to the		data_set_obj* get_pointer();																	// Return value of		void print_node();																			// Print Node info		friend ostream& operator<<(ostream& output_stream, const data_set_obj a);		status get_array_element(complex &result, const int index, const string_class field);		status set_array_element(const complex new_value, const int index, const string_class field);		int get_length();		int get_width();		void get_fields(string_class *storage);		};#endif