/************************************************************************************** * HEADER FILE: IO_map_object.h * PURPOSE		: declare IO_map_object class **************************************************************************************/#ifndef _IO_map_object_h#define _IO_map_object_h#include "newstring.h"#include "IO_map.h"#include "define_vars.h"class IO_map_object{	private:		string_class name;																								// Indexing object 		IO_map map;																												// Data object		IO_map_object *next_IO_map_object;																// Used to form list	public:		static string_class undefined_index;				// Holds definition of an undefined index		// functions required by list		IO_map_object();																				// Default constructor		IO_map_object(string_class name);												// string_class constructor		IO_map_object(string_class name, IO_map new_map);				// string_class/IO_map constr.		IO_map_object(IO_map_object &original);									// Copy constructor		IO_map_object& operator=( IO_map_object &original);			// Overloaded =		string_class get_index();															// Return value of index field		status set_index(const string_class setting);					// Set value of index field 				void set_to_first_index();														// Return first index value		void set_to_next_index(const string_class ref);				// Return next index value		compare compare_index(const string_class index1,			// Return comparison between													const string_class index2);			// two index objects															IO_map get_data();																		// Return value of data field	 	status set_data(const IO_map setting);								// Set value of data field		compare compare_data(const IO_map name1,							// Return comparison between												 const IO_map name2);							// two data objects		void set_pointer_to(IO_map_object *p);								// Set pointer field		IO_map_object* get_pointer();													// Return value of pointer field		void print_node();																		// Print Node info		// Get/set individual elements of IO_map, not used by list...		void get_input_fields(string_class *stored_input_fields);		int get_number_of_input_fields();		void get_output_fields(string_class *stored_output_fields);		int get_number_of_output_fields();				// Overloaded output operator for IO_map_object		friend ostream& operator<<(ostream& output_stream, const IO_map_object a);};#endif