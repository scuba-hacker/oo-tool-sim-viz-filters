/************************************************************************************** * HEADER FILE: IO_map.h * PURPOSE		: declare IO_map class **************************************************************************************/#ifndef _IO_map_h#define _IO_map_h#include "ulist.h"#include "stringobject.h"#include "newstring.h"#include "define_vars.h"#include <iostream.h>class IO_map{	private:		int input_length;																				// No of input fields		int output_length;																			// No of output fields		string_class *input_fields;															// input fields array pointer		string_class *output_fields;														// output fields array pointer			public:		IO_map();																								// Default Constructor		IO_map(ulist<string_object> in_fields, 					 ulist<string_object> out_fields);								// Parameterized Constructor		IO_map(IO_map &original);																// Copy Constructor		IO_map& operator=(const IO_map &original);							// Overloaded = operator		~IO_map();																							// Destructor		// Overloaded output operator for IO_map object		friend ostream& operator<<(ostream& output_stream, const IO_map output_map);		// Access to private data members		void get_input_fields(string_class *storage);		int get_number_of_input_fields();		void get_output_fields(string_class *storage);		int get_number_of_output_fields();};#endif