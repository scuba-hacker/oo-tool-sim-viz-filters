/************************************************************************************** * HEADER FILE: calcobject.h * PURPOSE		: declare calc_object class **************************************************************************************/#ifndef _calcobject_h#define _calcobject_h#include "newstring.h"#include "rCalculatorClass.h"#include "define_vars.h"class calc_object{	private:		string_class identifier;																					// Indexing object		calculator data;																									// Data object		calc_object *next_calc_object;																		// Used to form list			public:		static string_class undefined_index;				// Holds definition of an undefined index					// Functions required by ulist...		calc_object();  																				// Default constructor		calc_object(const string_class name);										// String_class constructor		calc_object(const calc_object &original);								// Copy constructor		calc_object& operator=(calc_object &source);						// Overloaded =		string_class get_index();																// Return value of index field		status set_index(const string_class setting);						// Set value of index field 				void set_to_first_index();															// Return first index value		void set_to_next_index(const string_class ref);					// Return next index value		compare compare_index(const string_class index1,				// Return comparison between													const string_class index2);				// two index objects				calculator get_data();																	// Return value of data field	  status set_data(const calculator setting);							// Set value of data field		compare compare_data(const calculator name1,						// Return comparison between												 const calculator name2);						// two data objects				void set_pointer_to(calc_object *p);										// Set pointer field		calc_object* get_pointer();															// Return pointer field		void print_node();																			// Print Node info		// Overloaded output operator for name_object		friend ostream& operator<<(ostream& output_stream, calc_object a);		// Access to public member functions of calculator (data object)		complex evaluate(string_class input_string);		string_class flush_errors();		ostream& peek_errors(ostream& output_stream);		int get_number_of_errors();		void all_clear();		status clear_single_memory(string_class name);		void auto_verify_off();		status auto_verify_on();		void set_validator(validator *checker);};#endif