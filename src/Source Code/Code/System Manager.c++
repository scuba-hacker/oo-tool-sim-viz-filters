/************************************************************************************** * CODE FILE: System Manager.c++ * PURPOSE	: Main code file - defines version 1 of system *            Allows graphing of calculator results by storing graph specifications as *            variables inside a calculator named 'graph' in the calc_list. **************************************************************************************/#include "rCalculatorClass.h"#include "calc_preprocessor.h"#include "validator.h"#include "CalculatorManager.h"#include "newstring.h"#include "complex.h"#include "ulist.h"#include "stringobject.h"#include "name_object.h"#include "IO_map_object.h"#include "IO_map.h"#include "set_input.h"#include "set_input_object.h"#include "Data Manager.h"#include "graphObject.h"#include "extraclasses.h"#include "graph_device.h"#include "graph_spec.h"#include "graph_spec_obj.h"#include "Graph Manager.h"#include "ulist.c++"#include <SIOUX.h>// Declare and define array matching user labels to OPERATIONSconst int preprocessor_array_length=50;const user_label labels[preprocessor_array_length]={	user_label ("sqrt", "SQUARE_ROOT"),	user_label ("cbrt", "CUBE_ROOT"),	user_label ("rootx", "ROOTX"),	user_label ("sin", "SINE"),	user_label ("cos", "COSINE"),	user_label ("tan", "TANGENT"),	user_label ("asin", "ARCSINE"),	user_label ("acos", "ARCCOSINE"),	user_label ("atan", "ARCTANGENT"),	user_label ("sinh", "SINE-H"),	user_label ("cosh", "COSINE-H"),	user_label ("tanh", "TANGENT-H"),	user_label ("asinh", "ARCSINE-H"),	user_label ("acosh", "ARCCOSINE-H"),	user_label ("atanh", "ARCTANGENT-H"),	user_label ("ln", "NATURAL_LOG"),	user_label ("log10", "LOG10"),	user_label ("log2", "LOG2"),	user_label ("logx", "LOGX"),	user_label ("arg", "ARGUMENT"),	user_label ("MILLI", "MILLI"),	user_label ("MICRO", "MICRO"),	user_label ("NANO","NANO"),	user_label ("PICO","PICO"),	user_label ("FEMTO", "FEMTO"),	user_label ("KILO", "KILO"),	user_label ("MEGA", "MEGA"),	user_label ("GIGA", "GIGA"),	user_label ("TERA", "TERA"),	user_label ("PETA", "PETA"),	user_label ("EXA",  "EXA"),	user_label ("SUM", "SUMMATION"),	user_label ("PROD", "PRODATION"),	user_label ("re", "REAL"),	user_label ("im", "IMAGINARY"),	user_label ("wind", "WINDOW")};// Declare and define array holding constants for use by all calculatorsconst int number_of_constants=3;name_object calc_constants[number_of_constants]={	name_object ("pi", complex_container (CONSTANT, complex(3.1415926535897932385,0))),	name_object ("e", complex_container (CONSTANT, complex(2.7182818284590452354,0))),	name_object ("j", complex_container (CONSTANT, complex(0,1)))};// Declare one instance of every type of ulist available.ulist<IO_map_object> _t1; ulist<set_input_object> _t2; ulist<data_set_obj> _t3;ulist<record_object> _t4; ulist<string_object> _t5; ulist<name_object> _t6;ulist<graph_spec_obj> _t7;// Function prototypes for this file:status extract_graph_specs(calculator_manager &calc_manager, graph_device &graph_);void display_graph(calculator_manager &calc_manager, graph_device &graph_);void Initialize(void);// Graph name constantsstring_class x_min_string="xmin";string_class x_max_string="xmax";string_class x_scale_string="xscale";string_class x_div_string="xdiv";string_class y_min_string="ymin";string_class y_max_string="ymax";string_class y_scale_string="yscale";string_class y_div_string="ydiv";string_class var_min_string="varmin";string_class var_max_string="varmax";string_class sample_res_string="res";string_class x_string="xgraph";string_class y_string="ygraph";// Numeric storage variables for graph name constantsdouble x_min, x_max, x_scale, x_tick, y_min, y_max, y_scale, y_tick, var_min, var_max;// Resolution for sampling graph linedouble sample_res;void main(void){	// Initialise Simple Input/Output User eXchange terminal.	SIOUXSettings.asktosaveonclose = FALSE;	SIOUXSettings.showstatusline = TRUE;	SIOUXSettings.columns = 80;	SIOUXSettings.rows = 45;	SIOUXSettings.toppixel = 50;	SIOUXSettings.leftpixel = 340;	// Call to cout to instantiate overloaded output stream operators for all ulists	cout << _t1 << _t2 << _t3 << _t4 << _t5 << _t6 << _t7 << "\n";		Initialize();																		// Initialise Macintosh Toolbox Managers		// Initialise calculator class with constants array	calculator::build_internal_constants(calc_constants, number_of_constants);	// Instantiate a preprocessor object - mapping all user_label elements in 'labels' array	// to all token_name elements in 'token_names' array.	calc_preprocessor preprocessor(labels, calculator::token_names,																 preprocessor_array_length);	// Initialise complex_container class with pointer to preprocessor object	complex_container::postprocessing=&preprocessor;	// Instantiate calculator manager - linked to preprocessor object	calculator_manager calc_manager(&preprocessor);		data_manager data_man;																			// Instantiate data manager	graph_manager graph_man;																		// Instantiate graph manager		// Instantiate single graphing window object	graph_device graph_(port_info (0,40,340,380), border_info (), scale_info (2,4),						scale_info (2,4), range_info (-10,10), range_info (-10,10),						tick_info (5,2));	graph_.blank_graph();															// Draw default axes in graphing window	data_man.display_help();													// Display commands for data manager	data_man.interface();															// Invoke data manager interface	graph_man.display_help();													// Display commands for graph manager	graph_man.interface();														// Invoke graph manager interface			calc_manager.display_help();											// Display commands for calc manager	for (;;)																					// Infinite loop - graph plots on	{																									// each exit from calculator_manager		calc_manager.interface();												// Invoke calculator manager interface		if (extract_graph_specs(calc_manager,graph_)==SUCCESS)	// Extract graph specifications			display_graph(calc_manager,graph_);										// Display graph		else			cout << "No Graph calculator\n";											// Display no graph.	}}// Function which extracts graph specifications from calculator named 'graph' controlled by// calculator_manager - stores specifications in graph_device.status extract_graph_specs(calculator_manager &calc_manager, graph_device &graph_){	// Set calculator manager to point to the calculator named 'graph'	string_class current=calc_manager.get_current_calc();				// Backup current calculator	if (calc_manager.set_current_calc("graph")==ERROR)					// Set current to graph calc		return ERROR;	// Extract x-axis range data	x_min=calc_manager.process_order(x_min_string).re;	x_max=calc_manager.process_order(x_max_string).re;	graph_.set_horiz_range(range_info (x_min, x_max));					// Store data in graph_device			// Extract x-axis scale data	x_scale=calc_manager.process_order(x_scale_string).re;	x_tick=calc_manager.process_order(x_div_string).re;	graph_.set_horiz_scales(scale_info (x_scale, x_tick));			// Store data in graph_device	// Extract y-axis range data	y_min=calc_manager.process_order(y_min_string).re;	y_max=calc_manager.process_order(y_max_string).re;	graph_.set_vert_range(range_info (y_min, y_max));						// Store data in graph_device	// Extract y-axis scale data	y_scale=calc_manager.process_order(y_scale_string).re;	y_tick=calc_manager.process_order(y_div_string).re;	graph_.set_vert_scales(scale_info (y_scale, y_tick));				// Store data in graph_device	// Extract minimum/maximum values for 'var' (sweep) variable	var_min=calc_manager.process_order(var_min_string).re;	var_max=calc_manager.process_order(var_max_string).re;	// Extract graph plot resolution	sample_res=calc_manager.process_order(sample_res_string).re;	if (sample_res<0)																						// Take modulus of sample_res		sample_res=-sample_res;	if (current!="")																						// If calc list not empty		calc_manager.set_current_calc(current);										// Restore current to backup	return SUCCESS;																							// All parameters extracted}// Define function to draw graph on rectangular axes in graphing windowvoid display_graph(calculator_manager &calc_manager, graph_device &graph_){	graph_.blank_graph();																// Draw blank graph, with axes/scales		char order[1000];	double x,y;		sprintf(order,"var=%f12",var_min);									// Set order to 1st 'var' sweep value	calc_manager.process_order(order);									// Assign calculator 'var' variable	y=calc_manager.process_order(y_string).re;					// Evaluate and store y-axis value	x=calc_manager.process_order(x_string).re;					// Evaluate and store x-axis value	MoveTo(graph_.translate_x(x),graph_.translate_y(y));// Move pen to first graph point	graph_.PlaceCross(4);															// Place 4 pixel cross at new pen point	ForeColor(blueColor);																									// Set line colour	// Increase 'var' sweep parameter from 2nd sample point to last sample point	for (double variable=var_min+sample_res; variable<=var_max; variable+=sample_res)	{		sprintf(order,"var=%f12",variable);								// Set order to 'var' sweep value		calc_manager.process_order(order);								// Assign calculator 'var' variable		y=calc_manager.process_order(y_string).re;				// Evaluate and store y-axis value		x=calc_manager.process_order(x_string).re;				// Evaluate and store x-axis value		LineTo(graph_.translate_x(x),graph_.translate_y(y));	// Draw line to new graph point		graph_.PlaceCross(4);														// Place 4 pixel cross at new pen point	}}// Define function for initalising all Macintosh Operating System Managers// Enables use of graphics, windows, fonts, etc.void Initialize(void){	/* Initialize all the managers. */	InitGraf(&qd.thePort);	InitFonts();	InitWindows();	InitMenus();	TEInit();	InitDialogs(nil);	InitCursor();}